@page "/movies"
@inject HttpClient Http
@inject FlickBinge.UI.Services.LocalStorageService Storage

<h2 class="mb-4 text-light">Movies</h2>

@if (movies == null)
{
    <p class="text-light">Loading movies...</p>
}
else if (movies.Count == 0)
{
    <p class="text-light">No movies found.</p>
}
else
{
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-4">
        @foreach (var movie in movies)
        {
            <div class="col">
                <div class="card h-100 bg-dark text-light border-secondary shadow-sm">
                    <img src="@movie.poster" class="card-img-top" alt="@movie.title"
                         style="object-fit: cover; height: 350px;" />
                    <div class="card-body text-center">
                        <h5 class="card-title">@movie.title (@movie.year)</h5>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Movie>? movies;

    protected override async Task OnInitializedAsync()
    
    {
        try
        {
            var token = await Storage.GetItemAsync("accessToken");
            if (!string.IsNullOrEmpty(token))
            {
                // Simple token debugging - just show first/last parts
                Console.WriteLine($"Token length: {token.Length}");
                Console.WriteLine($"Token starts with: {token.Substring(0, Math.Min(20, token.Length))}...");
                Console.WriteLine($"Token ends with: ...{token.Substring(Math.Max(0, token.Length - 20))}");

                Http.DefaultRequestHeaders.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

                // Make the request and handle response properly
                var response = await Http.GetAsync("http://localhost:5000/movies");
                Console.WriteLine($"Response status: {response.StatusCode}");
                Console.WriteLine($"Response headers: {string.Join(", ", response.Headers.Select(h => $"{h.Key}: {string.Join(", ", h.Value)}"))}");

                if (response.IsSuccessStatusCode)
                {
                    movies = await response.Content.ReadFromJsonAsync<List<Movie>>();
                    Console.WriteLine($"Loaded {movies?.Count ?? 0} movies");
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Error response: {errorContent}");
                }
            }
            else
            {
                Console.WriteLine("No token found in storage");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    public class Movie
    {
        public string title { get; set; }
        public string year { get; set; }
        public string poster { get; set; }
        public string imdbID { get; set; }
    }
}